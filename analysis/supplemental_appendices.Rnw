\documentclass[12pt]{article}
\usepackage{amsmath}
\usepackage{graphicx,psfrag,epsf}
\usepackage{enumerate}
\usepackage{hyperref}
\usepackage{natbib}
\usepackage{url} % not crucial - just used below for the URL 

%\pdfminorversion=4
% NOTE: To produce blinded version, replace "0" with "1" below.
\newcommand{\blind}{0}
\overfullrule=1mm
% DON'T change margins - should be 1 inch all around.
\addtolength{\oddsidemargin}{-.5in}%
\addtolength{\evensidemargin}{-.5in}%
\addtolength{\textwidth}{1in}%
\addtolength{\textheight}{1.3in}%
\addtolength{\topmargin}{-.8in}%

\let\proglang=\textsf
\newcommand{\pkg}[1]{{\fontseries{b}\selectfont #1}}
\def\newblock{\hskip .11em plus .33em minus .07em}

\pdfminorversion=4
\begin{document}

%\bibliographystyle{natbib}

\def\spacingset#1{\renewcommand{\baselinestretch}%
{#1}\small\normalsize} \spacingset{1}
\if0\blind
{
  \title{\bf Wrangling categorical data in R: Supplemental Appendices}
  \author{Amelia McNamara\footnote{Corresponding author email: \url{amcnamara@smith.edu}} \hspace{.2cm}\\
    Program in Statistical and Data Sciences, Smith College\\ 
    and \\
    Nicholas J Horton \\
    Department of Mathematics and Statistics, Amherst College}
  \maketitle
} \fi

\if1\blind
{
  \bigskip
  \bigskip
  \bigskip
  \begin{center}
    {\LARGE\bf Title}
\end{center}
  \medskip
} \fi

\bigskip
\begin{abstract}
Supplemental appendices to accompany Wrangling categorical data in R. A pre-print of this article is available at \url{https://peerj.com/preprints/3163/}. The full article appears in The American Statistician~\citep{McNHor2018}. 
\end{abstract}

\noindent%
{\it Keywords:}  statistical computing; data derivation; data science; data management
\vfill

\newpage
\spacingset{1.45} % DON'T change the spacing!





<<setup, include=FALSE>>=
knitr::opts_chunk$set(echo = TRUE, message=FALSE, warning=FALSE, 
                      size='footnotesize', cache=FALSE, error=TRUE, tidy=FALSE)
@

\appendix

\section*{Supplementary Appendix A: Loading the data}\label{load}
Since this paper appears in a reproducible special issue, we want to make sure our data ingestion process is as reproducible as possible. We are using the General Social Survey (GSS) data, which includes many years of data (1972-2014) and many possible variables (150-800 variables, depending on the year)~\citep{GSS2016, GSS2016b}. However, the GSS data has some idiosyncrasies. So, we are attempting good-enough practices for data ingest~\citep{WilBry2016}.

The major issue related to reproducibility is the fact that the dataset is not available through an API. For SPSS and Stata users, yearly data are available for direct download on the website. For more format possibilities, users must go through an online wizard to select variables and years for the data they wish to download~\citep{GSS2016b}. For this paper, we selected a subset of the demographic variables and the year 2014. The possible output options from the wizard are Excel (either data and metadata or metadata only), SPSS, SAS, Stata, DDI, or \proglang{R} script. We selected both the Excel and \proglang{R} formats to look at the differences. 

The \proglang{R} format provided by the GSS is actually a Stata file and custom \proglang{R} script  using the \pkg{foreign} package to do the translation. Here is the result of that process.

<<>>=
library(dplyr)
source('../data/GSS.r')
glimpse(GSS)
@

Obviously, the result is less than ideal, lacking many of the qualities for sharing data for collaboaration~\citep{EllLee2017}. All of the factor variables are encoded as integers, but their level labels have been lost. We have to look at a codebook to determine if \verb#SEX == 1# indicates male or female. We would rather preserve the integrated level labels. In order to do this, our best option is to use the Excel file and use the \pkg{readxl} package to load it. 


<<warning=FALSE>>=
library(readxl)
GSS <- read_excel("../data/GSS.xls")
glimpse(GSS)
@

This is a little better. Now the character strings are preserved. But, the data is not yet usable in an analysis. One problem is some of the variable names include spaces, so they are hard to use. Also, one variable name is repeated, perhaps because of an error in the data wizard. To fix these issues, the variables must be renamed the variables such that all variables have unique names without spaces. 

<<warning=FALSE>>=
names(GSS) <- make.names(names(GSS), unique=TRUE)
names(GSS)
@

These names are an improvement, but now some are full of periods. For ease of coding, more human readable names are preferable. As with all the tasks in this paper, there is a fragile way to do this in \pkg{base} \proglang{R}, but we'll use the more robust \verb#rename()# function from the \pkg{dplyr} package. \verb#rename()# 

<<>>=
library(dplyr)
GSS <- GSS %>% 
  rename(Year = Gss.year.for.this.respondent.......................,
         ID = Respondent.id.number,
         LaborStatus = Labor.force.status,
         OccupationalPrestigeScore = Rs.occupational.prestige.score...1970.,
         MaritalStatus = Marital.status,
         NumChildren = Number.of.children,
         Age = Age.of.respondent,
         Sex = Respondents.sex,
         HighestSchoolCompleted = Highest.year.of.school.completed,
         Race = Race.of.respondent,
         ChildhoodFamilyIncome = Rs.family.income.when.16.yrs.old,
         TotalFamilyIncome = Total.family.income,
         RespondentIncome = Respondents.income,
         PoliticalParty = Political.party.affiliation,
         OpinionOfIncome = Opinion.of.family.income,
         SexualOrientation = Sexual.orientation)
names(GSS)
GSS <- GSS %>%
  select(-Total.family.income.1)
@
With the data loaded and the names adjusted, the cleaned data can be written to a new file for use in the body of the paper. 
<<>>=
library(readr)
write_csv(GSS, path="../data/GSScleaned.csv")
@
A version of this file is used as our motivating example.

\section*{Supplementary Appendix B: Closing exercise}
We have included the following as a possible supplementary exercise.

Subjects in the HELP study were also categorized into categories of primary and secondary drug and alcohol involvement, as displayed in the following table.

<<>>=
library(mosaic)
library(mosaicData)
HELPbase <- HELPfull %>%
  filter(TIME == 0)
tally( ~ PRIM_SUB + SECD_SUB, data=HELPbase)
@

The following coding of substance use involvement was used in the study.

\begin{tabular}{l|l}
value&description \\ \hline
0&None \\
1&Alcohol \\
2&Cocaine \\
3&Heroin \\
4&Barbituates \\
5&Benzos \\
6&Marijuana \\
7&Methadone \\
8&Opiates \\ \hline
\end{tabular}


Create a new variable called \verb#primsub# combining the primary and secondary substances into a categorical variable with values corresponding to primary and secondary substances of the form: {\tt alcohol only}, \\ {\tt cocaine only}, {\tt heroin only}, \\{\tt alcohol-cocaine}, {\tt cocaine-alcohol}, or {\tt other}.  Code any group with fewer than 5 entries as {\tt alcohol-other}, {\tt cocaine-other}, or {\tt heroin-other}.  If \verb#PRIM\_SUB == 6# make the \verb#primsub# variable missing.


How many subjects are there in the {\tt alcohol-none} group?  How many subjects are there in the {\tt alcohol-other} group?  What are the three most common groups?

SOLUTION:
<<>>=
HELPbase <- HELPbase %>%
  mutate(
    primary= recode(PRIM_SUB, 
      `1`="alcohol",
      `2`="cocaine",
      `3`="heroin",
      `4`="barbituates",
      `5`="benzos",
      `6`="marijuana",
      `7`="methadone",
      `8`="opiates"),
    second=recode(SECD_SUB,
      `0`="none",
      `1`="alcohol",
      `2`="cocaine",
      `3`="heroin",
      `4`="barbituates",
      `5`="benzos",
      `6`="marijuana",
      `7`="methadone",
      `8`="opiates"),
    title=paste0(primary, "-", second) 
)
@
<<>>=
tally(~ primary, data=HELPbase)
tally(~ second, data=HELPbase)

counts <- HELPbase %>%
  group_by(primary, second) %>%
  summarise(observed=n())

merged <- left_join(HELPbase, counts, by=c("primary", "second"))
@

<<>>=
merged <- merged %>%
  mutate(
    title = 
      case_when(
        observed < 5 & primary == "alcohol" ~ "alcohol-other",
        observed < 5 & primary == "cocaine" ~ "cocaine-other",
        observed < 5 & primary == "heroin" ~ "heroin-other",
        TRUE ~ title),
    title = ifelse(primary == "marijuana", NA, title))

tally(~ title + observed, data=merged)
@

<<>>=
tally(~ title == "alcohol-none", data=merged)
tally(~ title == "alcohol-other", data=merged)
sort(tally(~ title, data=merged), decreasing=TRUE)[1:3]
@

\bibliographystyle{plainnat}
\bibliography{bibliography.bib}
\end{document}